package ${javaInfo.basePackageName}.${javaInfo.module}.controller;

#set($entityClass = ${javaInfo.getEntityName(false)})
#set($entityVar = ${javaInfo.getEntityName(true)})
#set($serviceClass = ${javaInfo.getEntityName(false)} + "Service")
#set($serviceVar = ${javaInfo.getEntityName(true)} + "Service")

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.chinasofti.ro.bizframework.core.data.validation.Validation;
import com.chinasofti.ro.bizframework.core.mvc.Controller;
import com.chinasofti.ro.bizframework.core.mvc.View;
import com.chinasofti.ro.bizframework.core.orm.Page;
import com.chinasofti.ro.bizframework.core.orm.PageUtil;
#if(${javaInfo.hasExport()})
import com.chinasofti.ro.bizframework.modules.excel.ExcelExporter;
import com.chinasofti.ro.bizframework.modules.json.JSONObject;
import com.chinasofti.ro.bizframework.modules.json.JSONSerializer;
#end
import ${javaInfo.basePackageName}.${javaInfo.module}.model.*;
import ${javaInfo.basePackageName}.${javaInfo.module}.service.${serviceClass};



/**
 * <p>Controller</p>
 * 
 * @author BizFoundation
 * @version 1.0
 * @since 1.0
 */
public class ${entityClass}Controller extends Controller {

	protected Logger logger = LoggerFactory.getLogger(getClass());

#if(${javaInfo.hasList()})	
	/**
	 * <p>打开查询列表页面</p>
	 * 
	 */
	public void list(boolean restore){
		View view = new View(SUCCESS);
		
		this.render(view);
	}
	
	/**
	 * <p>查询分页数据</p>
	 * @param page
	 * @param ${entityVar}
	 */
	public void list${entityClass}(${entityClass} ${entityVar},Page page) {
		page = ${serviceVar}.findByPage(${entityVar}, page);
		this.renderJSON(PageUtil.toJson4JqGrid(page, true));
	}

#end
#if(${javaInfo.hasAddOrEdit()})
	public void add(){
		this.render(SUCCESS);
	}
#set($index = 1)
#set($args1 = "")##方法申明时定义的参数列表
#set($args2 = "")##方法调用时传递的参数列表
#foreach($entity in ${javaInfo.getEditEntityArgs()})
	#if($index > 1)#set($args1 = $args1 + ",") #set($args2 =  $args2 + ",") #end
	#set($args1 = $args1 + ${javaInfo.getEntityName($entity,false)} + " " + ${javaInfo.getEntityName($entity,true)}) 
	#set($args2 = $args2 + ${javaInfo.getEntityName($entity,true)})
	#set($index = $index + 1)
#end

	public void save(${args1}){
		if (Validation.hasErrors()) {
			View view = new View(FAILED);
#foreach($model in ${javaInfo.getEditRefEntities()})
#set($modelVar = ${javaInfo.getEntityName($model,true)})
			view.bind("${modelVar}",${modelVar});
#end
			this.render(view);
		}
		${serviceVar}.save(${args2});
		View view = new View(SUCCESS);
		this.success("add.success");
		this.redirect(view);
	}
	
	
	public void edit(${javaInfo.getPKFieldJavaType($javaInfo.entity)} id){
		if(null == id){
			throw new NullPointerException("主键为Null");
		}
		View view = new View(SUCCESS);

#foreach($model in ${javaInfo.getEditEntityArgs()})
#set($pkFieldName = ${javaInfo.getPKFieldNameReal($model)})
#set($modelClass = ${javaInfo.getEntityName($model,false)})
#set($modelVar = ${javaInfo.getEntityName($model,true)})
		${modelClass} ${modelVar} = new ${modelClass}();
		${modelVar}.${javaInfo.getFieldSetMethod(${pkFieldName})}(id);
		${modelVar} = (${modelClass})${serviceVar}.findModelFirst(${modelVar});
		view.bind("${modelVar}",${modelVar});
		
#end
		this.render(view);
	}

	public void update(${args1}){
		${serviceVar}.update(${args2});
		View view = new View(SUCCESS);
		this.success("update.success");
		this.redirect(view);
	}

#end
#if(${javaInfo.hasShow()})
	 public void show(${javaInfo.getPKFieldJavaType($javaInfo.entity)} id){
	 	if(null == id){
			throw new NullPointerException("主键为Null");
		}
		${entityClass} ${entityVar} = new ${entityClass}();
		${entityVar}.${javaInfo.getFieldSetMethod(${javaInfo.getPKFieldNameReal()})}(id);
		${entityVar} = (${entityClass})${serviceVar}.findModelFirst(${entityVar});
		View view = new View(SUCCESS);
		view.bind("${entityVar}", ${entityVar});
		this.render(view);
	}

#end
#if(${javaInfo.hasAddOrEdit()})
	 public void delete(String ids){
		${serviceVar}.detete(ids);
		View view = new View(SUCCESS);
		view.bind("restore", new Boolean(true));
		this.success("delete.success");
		this.redirect(view);
	}

#end
#if(${javaInfo.hasExport()})
	/**
	 * 导出Excel
	 * @param ${entityVar}
	 * @param page
	 * @param exportParams
	 */
	public void exportExcel(${entityClass} ${entityVar}, Page page, String exportParams) {
		JSONObject json = (JSONObject) JSONSerializer.toJSON(exportParams);
		ExcelExporter exporter = ExcelExporter.prepareBatchExport(json);

		// 默认采用分页导出方式，从第一页开始分页导出，分页大小为5000
		page.setPageNo(1);
		page.setPageSize(5000);
		int size;
		do {
			${serviceVar}.findByPage(${entityVar}, page);
			size = page.getResult().size();
			exporter.batchAppendData(page.getResult());
			page.setPageNo(page.getPageNo() + 1);
		} while (size > 0);
		renderExcel(exporter, "${entityClass}.xls");
	}
	
#end
    /**
     * <p>注入${serviceVar}</p>
     */
    private ${serviceClass} ${serviceVar};

	public void set${serviceClass}(${serviceClass} ${serviceVar}) {
		this.${serviceVar} = ${serviceVar};
	}
}