package ${PACKAGE_NAME};

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.chinasofti.ro.bizframework.core.orm.Page;
import com.chinasofti.ro.bizframework.core.orm.PageUtil;
import com.chinasofti.ro.bizframework.core.mvc.Controller;
import com.chinasofti.ro.bizframework.core.mvc.View;
import com.chinasofti.ro.bizframework.core.orm.entity.Model;
#if(${PO_IS_COMPOSITE_PK})
import com.chinasofti.ro.bizframework.core.data.bind.CompositeKeyUtil;
#end
import com.chinasofti.ro.bizframework.core.data.validation.Validation;
#if(${EXPORT_EXCEL})
import com.chinasofti.ro.bizframework.modules.excel.ExcelExporter;
import com.chinasofti.ro.bizframework.modules.json.JSONObject;
import com.chinasofti.ro.bizframework.modules.json.JSONSerializer;
#end
#foreach( $type in $CLASS_IMPORT_TYPES)
import $type;
#end

/**
 * <p>Controller</p>
 * 
 * @author BizFoundation
 * @version 1.0
 * @since 1.0
 */
public class ${CLASS_FIRST_UPPER_NAME} extends Controller {
	protected Logger logger = LoggerFactory.getLogger(getClass());

#if(${GEN_LIST_VIEW})	
	/**
	 * <p>打开查询列表页面</p>
	 * 
	 */
	public void list() {
		this.render(SUCCESS);
	}

	/**
	 * <p>查询分页数据</p>
	 * @param gridPage
	 * @param ${PO_FIRST_LOWER_NAME}
	 */
	public void list${PO_FIRST_UPPER_NAME}(Page page,${PO_FIRST_UPPER_NAME} ${PO_FIRST_LOWER_NAME}) {
		
		page = ${PO_FIRST_LOWER_NAME}Service.findByPage(${PO_FIRST_LOWER_NAME}, page);
		this.renderJSON(PageUtil.toJson4JqGrid(page, true));
	}
#end
#if(${GEN_SHOW_VIEW})
#if(${PO_IS_COMPOSITE_PK})
	public void show(String id) throws Exception {
		if(null == id){
			throw new NullPointerException("主键为Null");
		}
		${PO_PK_FIRST_UPPER_NAME} ${PO_PK_FIRST_LOWER_NAME} = new ${PO_PK_FIRST_UPPER_NAME}();
		CompositeKeyUtil.setCompositeKey(${PO_PK_FIRST_LOWER_NAME},id,Controller.request());
		Model ${PO_FIRST_LOWER_NAME} = ${PO_FIRST_LOWER_NAME}Service.findById(${PO_PK_FIRST_LOWER_NAME});
		View view = new View(SUCCESS);
		view.bind("${PO_FIRST_LOWER_NAME}",${PO_FIRST_LOWER_NAME});
		this.render(view);
	}
#else
	public void show(${PO_PK_SIMPLE_TYPE} id) {
		if(null == id){
			throw new NullPointerException("主键为Null");
		}
		Model ${PO_FIRST_LOWER_NAME} = ${PO_FIRST_LOWER_NAME}Service.findById(id);
		View view = new View(SUCCESS);
		view.bind("${PO_FIRST_LOWER_NAME}",${PO_FIRST_LOWER_NAME});
		this.render(view);
	}
#end
#end

#if(${GEN_ADD_VIEW})	
	 public void save(${PO_FIRST_UPPER_NAME} ${PO_FIRST_LOWER_NAME}) {
		if (Validation.hasErrors()) {
			this.printError(Validation.getErrorsAsString());
			return;
		}
		${PO_FIRST_LOWER_NAME}Service.save(${PO_FIRST_LOWER_NAME});
	}
#end

#if(${GEN_EDIT_VIEW})		
#if(${PO_IS_COMPOSITE_PK})
	public void edit(String id) throws Exception{
		if(null == id){
			throw new NullPointerException("主键为Null");
		}
		${PO_PK_FIRST_UPPER_NAME} ${PO_PK_FIRST_LOWER_NAME} = new ${PO_PK_FIRST_UPPER_NAME}();
		CompositeKeyUtil.setCompositeKey(${PO_PK_FIRST_LOWER_NAME},id,Controller.request());
		Model ${PO_FIRST_LOWER_NAME} = ${PO_FIRST_LOWER_NAME}Service.findById(${PO_PK_FIRST_LOWER_NAME});
		this.renderJSON(${PO_FIRST_LOWER_NAME}.toJson());
	}
#else
	public void edit(${PO_PK_SIMPLE_TYPE} id) {
		if(null == id){
			throw new NullPointerException("主键为Null");
		}
		Model ${PO_FIRST_LOWER_NAME} = ${PO_FIRST_LOWER_NAME}Service.findById(id);
		this.renderJSON(${PO_FIRST_LOWER_NAME}.toJson());
	}
#end

	public void update(${PO_FIRST_UPPER_NAME} ${PO_FIRST_LOWER_NAME}) {
		${PO_FIRST_LOWER_NAME}Service.update(${PO_FIRST_LOWER_NAME});
		this.renderJSON(${PO_FIRST_LOWER_NAME});
	}
#end

#if(${GEN_LIST_VIEW})
	public void delete(String ids) {
#if(${PO_IS_COMPOSITE_PK})
		this.${PO_FIRST_LOWER_NAME}Service.batchDelete(CompositeKeyUtil.convertIds(ids));
#else
		this.${PO_FIRST_LOWER_NAME}Service.batchDelete(ids);
#end
	}
#end

#if(${EXPORT_EXCEL})
	/**
	 * 导出Excel
	 * @param ${PO_FIRST_LOWER_NAME}
	 * @param page
	 * @param exportParams
	 */
	public void exportExcel(${PO_FIRST_UPPER_NAME} ${PO_FIRST_LOWER_NAME}, Page page, String exportParams) {
		JSONObject json = (JSONObject) JSONSerializer.toJSON(exportParams);
		ExcelExporter exporter = ExcelExporter.prepareBatchExport(json);

		// 默认采用分页导出方式，从第一页开始分页导出，分页大小为5000
		page.setPageNo(1);
		page.setPageSize(5000);
		int size;
		do {
			${PO_FIRST_LOWER_NAME}Service.findByPage(${PO_FIRST_LOWER_NAME}, page);
			size = page.getResult().size();
			exporter.batchAppendData(page.getResult());
			page.setPageNo(page.getPageNo() + 1);
		} while (size > 0);
		renderExcel(exporter, "${PO_FIRST_UPPER_NAME}.xls");
	}
#end
	
    /**
     * <p>注入 ${PO_FIRST_LOWER_NAME}Service</p>
     */
    private ${PO_FIRST_UPPER_NAME}Service ${PO_FIRST_LOWER_NAME}Service;

	public void set${PO_FIRST_UPPER_NAME}Service(${PO_FIRST_UPPER_NAME}Service ${PO_FIRST_LOWER_NAME}Service) {
		this.${PO_FIRST_LOWER_NAME}Service = ${PO_FIRST_LOWER_NAME}Service;
	}
}