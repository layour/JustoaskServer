package ${PACKAGE_NAME};

import java.net.URI;

import javax.validation.Validator;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.util.UriComponentsBuilder;
import org.springside.modules.beanvalidator.BeanValidators;
import org.springside.modules.web.MediaTypes;

import core.rest.RestException;

#foreach( $type in $CLASS_IMPORT_TYPES)
import $type;
#end

/**
 * Restful API的Controller.
 * 
 */
@Controller
@RequestMapping(value = "/api/${PO_FIRST_LOWER_NAME}")
public class ${CLASS_FIRST_UPPER_NAME} {

	private static Logger logger = LoggerFactory.getLogger(${CLASS_FIRST_UPPER_NAME}.class);

	@Autowired
	private ${SERVICE_FIRST_UPPER_NAME} ${SERVICE_FIRST_LOWER_NAME};

	@Autowired
	private Validator validator;
	
	/**
	 * 获取单个记录
	 * @param ${PO_PK_FIRST_LOWER_NAME} ：记录主键ID
	 * @return ${PO_FIRST_UPPER_NAME} ：实体对象
	 */
	@RequestMapping(value = "/{${PO_PK_FIRST_LOWER_NAME}}", method = RequestMethod.GET, produces = MediaTypes.JSON_UTF_8)
	public ${PO_FIRST_UPPER_NAME} get(@PathVariable("${PO_PK_FIRST_LOWER_NAME}") String ${PO_PK_FIRST_LOWER_NAME}) {
		${PO_FIRST_UPPER_NAME} ${PO_FIRST_LOWER_NAME} = ${SERVICE_FIRST_LOWER_NAME}.findById(${PO_PK_FIRST_LOWER_NAME});
		if (${PO_FIRST_LOWER_NAME} == null) {
			String message = "不存在(${PO_PK_FIRST_LOWER_NAME}:" + ${PO_PK_FIRST_LOWER_NAME} + ")";
			logger.warn(message);
			throw new RestException(HttpStatus.NOT_FOUND, message);
		}
		return ${PO_FIRST_LOWER_NAME};
	}
	
	/**
	 * 新增记录
	 * @return ResponseEntity<?> ：重定向URL
	 */
	@RequestMapping(method = RequestMethod.POST, consumes = MediaTypes.JSON)
	public ResponseEntity<?> create(@RequestBody ${PO_FIRST_UPPER_NAME} ${PO_FIRST_LOWER_NAME}, UriComponentsBuilder uriBuilder) {
		// 调用JSR303 Bean Validator进行校验, 异常将由RestExceptionHandler统一处理.
		BeanValidators.validateWithException(validator, ${PO_FIRST_LOWER_NAME});
		// 保存任务
		${SERVICE_FIRST_LOWER_NAME}.save(${PO_FIRST_LOWER_NAME});

		// 按照Restful风格约定，创建指向新任务的url, 也可以直接返回${PO_PK_FIRST_LOWER_NAME}或对象.
		String ${PO_PK_FIRST_LOWER_NAME} = ${PO_FIRST_LOWER_NAME}.get${PO_PK_FIRST_UPPER_NAME}();
		URI uri = uriBuilder.path("/api/${PO_FIRST_LOWER_NAME}/" + ${PO_PK_FIRST_LOWER_NAME}).build().toUri();
		HttpHeaders headers = new HttpHeaders();
		headers.setLocation(uri);

		return new ResponseEntity(headers, HttpStatus.CREATED);
	}
	
	/**
	 * 修改记录
	 * @param ${PO_PK_FIRST_LOWER_NAME} ：记录主键ID
	 */
	@RequestMapping(value = "/{${PO_PK_FIRST_LOWER_NAME}}", method = RequestMethod.PUT, consumes = MediaTypes.JSON)
	// 按Restful风格约定，返回204状态码, 无内容. 也可以返回200状态码.
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void update(@RequestBody ${PO_FIRST_UPPER_NAME} ${PO_FIRST_LOWER_NAME}) {
		// 调用JSR303 Bean Validator进行校验, 异常将由RestExceptionHandler统一处理.
		BeanValidators.validateWithException(validator, ${PO_FIRST_LOWER_NAME});
		// 保存任务
		${SERVICE_FIRST_LOWER_NAME}.update(${PO_FIRST_LOWER_NAME});
	}

	/**
	 * 删除记录
	 * @param ${PO_PK_FIRST_LOWER_NAME} ：记录主键ID
	 */
	@RequestMapping(value = "/{${PO_PK_FIRST_LOWER_NAME}}", method = RequestMethod.DELETE)
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void delete(@PathVariable("${PO_PK_FIRST_LOWER_NAME}") String ${PO_PK_FIRST_LOWER_NAME}) {
		${SERVICE_FIRST_LOWER_NAME}.delete(${PO_PK_FIRST_LOWER_NAME});
	}
}
